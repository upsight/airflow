diff --git a/airflow/models.py b/airflow/models.py
index ba0da0f..2d9ea3a 100755
--- a/airflow/models.py
+++ b/airflow/models.py
@@ -3794,6 +3794,10 @@ class DagStat(Base):
         :param full_query: whether to check dag_runs for new drs not in dag_stats
         :type full_query: bool
         """
+        # avoid querying with an empty IN clause
+        if not dag_ids:
+            return
+
         dag_ids = set(dag_ids)
 
         qry = (
@@ -3805,6 +3809,10 @@ class DagStat(Base):
         qry.delete(synchronize_session='fetch')
         session.commit()
 
+        # avoid querying with an empty IN clause
+        if not dirty_ids:
+            return
+
         qry = (
             session.query(DagRun.dag_id, DagRun.state, func.count('*'))
             .filter(DagRun.dag_id.in_(dirty_ids))
diff --git a/tests/core.py b/tests/core.py
index 870a0cb..db8ea9d 100644
--- a/tests/core.py
+++ b/tests/core.py
@@ -979,12 +979,18 @@ class CoreTest(unittest.TestCase):
         session.query(models.DagStat).delete()
         session.commit()
 
+        with warnings.catch_warnings(record=True) as caught_warnings:
+            models.DagStat.clean_dirty([], session=session)
+        self.assertEqual([], caught_warnings)
+
         run1 = self.dag_bash.create_dagrun(
             run_id="run1",
             execution_date=DEFAULT_DATE,
             state=State.RUNNING)
 
-        models.DagStat.clean_dirty([self.dag_bash.dag_id], session=session)
+        with warnings.catch_warnings(record=True) as caught_warnings:
+            models.DagStat.clean_dirty([self.dag_bash.dag_id], session=session)
+        self.assertEqual([], caught_warnings)
 
         qry = session.query(models.DagStat).all()
 
@@ -999,7 +1005,9 @@ class CoreTest(unittest.TestCase):
             execution_date=DEFAULT_DATE+timedelta(days=1),
             state=State.RUNNING)
 
-        models.DagStat.clean_dirty([self.dag_bash.dag_id], session=session)
+        with warnings.catch_warnings(record=True) as caught_warnings:
+            models.DagStat.clean_dirty([self.dag_bash.dag_id], session=session)
+        self.assertEqual([], caught_warnings)
 
         qry = session.query(models.DagStat).all()
 
@@ -1012,7 +1020,9 @@ class CoreTest(unittest.TestCase):
         session.query(models.DagRun).first().state = State.SUCCESS
         session.commit()
 
-        models.DagStat.clean_dirty([self.dag_bash.dag_id], session=session)
+        with warnings.catch_warnings(record=True) as caught_warnings:
+            models.DagStat.clean_dirty([self.dag_bash.dag_id], session=session)
+        self.assertEqual([], caught_warnings)
 
         qry = session.query(models.DagStat).filter(models.DagStat.state == State.SUCCESS).all()
         assert len(qry) == 1
